<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://SejuneOh.github.io/devlog/blog</id>
    <title>Devlog Blog</title>
    <updated>2022-04-13T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://SejuneOh.github.io/devlog/blog"/>
    <subtitle>Devlog Blog</subtitle>
    <icon>https://SejuneOh.github.io/devlog/img/favicon.svg</icon>
    <entry>
        <title type="html"><![CDATA[Upstream, DownStream]]></title>
        <id>Upstream, DownStream</id>
        <link href="https://SejuneOh.github.io/devlog/blog/Upstream, DownStream"/>
        <updated>2022-04-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[팀 프로젝트를 하면서, 많은 사람들이 같은 환경에서 소스의 버전 관리를 해야한다는 것은 거의 대부분 알 것입니다.]]></summary>
        <content type="html"><![CDATA[<p>팀 프로젝트를 하면서, 많은 사람들이 같은 환경에서 소스의 버전 관리를 해야한다는 것은 거의 대부분 알 것입니다.<br>
<!-- -->모든 개발을 시작하면서 Git, Github로 버전 관리 및 소스 관리를 하시면서, Repo의 admin에게 PR을 보내는 경험도 많이 해보셨을 것입니다. 여기서 upstream, downstream의 이야기를 들어 보셨을 것이라고 생각합니다.<br>
<!-- -->repository 기준으로 상대적인 개념인 두 단어에 대해서 정의한 내용을 포스팅 하려고 합니다.</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-vs-github">Git vs Github?<a class="hash-link" href="#git-vs-github" title="제목으로 바로 가기">​</a></h2><p>해당 단어의 개념을 알기 위해서는 아래의 Git과 Github의 개념을 이해해야 합니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="git"><a href="https://git-scm.com/" target="_blank" rel="noopener noreferrer">Git</a><a class="hash-link" href="#git" title="제목으로 바로 가기">​</a></h3><ul><li>VSC(Version Control System) : 버전 관리를 도와주스는 시스템</li><li>소스의 버전 관리 및 사용자들의 커밋과 수정 내용을 정리해주고 기록한다.</li><li>관리하는 프로젝트 폴더에서 설정 및 소스 관리를 해준다.</li><li>병렬 개발이 가능하다.(동시에 파일 수정이 가능하다)</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="github"><a href="https://github.com/" target="_blank" rel="noopener noreferrer">Github</a><a class="hash-link" href="#github" title="제목으로 바로 가기">​</a></h3><ul><li>원격으로(네트워크)상에서 소스 Git의 기능을 해주는 플랫폼입니다.</li><li>원격으로 소스 수정 및 내용을 취합하고, 내용을 기록해주고 소스를 저장해는 웹 플랫폼입니다.</li><li>소스 관리 및 접근 가능한 팀원 보안등 많은 기능을 제공해줍니다.</li></ul><p>상대적으로 2개는 비슷해보이지만 개념은 다릅니다. 정확히 말해서는 로컬의 git으로 작업 후, 작업 내용을 github의 repo로 보내는 것입니다.</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="upstream-downstream">UpStream, DownStream<a class="hash-link" href="#upstream-downstream" title="제목으로 바로 가기">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="upstream">Upstream<a class="hash-link" href="#upstream" title="제목으로 바로 가기">​</a></h3><ul><li>소스가 최종적으로 관리되는 Repository를 말합니다.</li><li>팀원, 다른 개발자가 소스를 수정하고 PR을 보내고 다른 사람이 수정한 내용을 내려 받는 최상위 Repo입니다.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="downstream">Downstream<a class="hash-link" href="#downstream" title="제목으로 바로 가기">​</a></h3><ul><li>현재 최상위 Repo에서 하위 Repo 즉, 자신이 소스를 개발하는 환경을 말합니다. </li><li>PR을 보내고, 개발 및 소스를 관리하는 환경을 말합니다.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="왜-상대적인-개념인가">왜 상대적인 개념인가<a class="hash-link" href="#왜-상대적인-개념인가" title="제목으로 바로 가기">​</a></h3><ol><li><em>내가 혼자 스스로 프로젝트를 github로 관리했을 때</em><br>upstream: Gihub Repo<br>downstream: Local Git 환경</li></ol><ol start="2"><li><em>협업에서 다른 사람의 프로젝트에서 Fork(상대방의 소스를 자신의 repo로)에서 작업할때</em><br>upstream: Fork original repo<br>downstream: 자신의 Oraganization repo</li></ol><p>기준이 누군가에 따른 상대적인 개념이기 때문에 정리하면서, 공부한 내용을 포스팅하면서 공유합니다.<br>
<!-- -->감사합니다.</p><hr>]]></content>
        <author>
            <name>Sejune Oh</name>
            <uri>https://github.com/SejuneOh</uri>
        </author>
        <category label="github" term="github"/>
        <category label="git" term="git"/>
    </entry>
</feed>